using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Serilog;
using Serilog.Events;
using Serilog.Sinks.SystemConsole.Themes;

namespace StaticPatcher
{
    public class Program
    {
        private static Lazy<StaticPatcherSettings> _settings = null!;
        private static ILogger _logger = null!;

        private static void ConfigureLogging()
        {
            LogEventLevel logLevel = _settings.Value.VerboseLogging
                ? LogEventLevel.Debug
                : LogEventLevel.Information;

            string logTemplate =
                logLevel == LogEventLevel.Debug
                    ? "{Timestamp:u}|{Level:u4}|{SourceContext}|{Message:lj}{NewLine}{Exception}"
                    : "{Message:lj}{NewLine}{Exception}";

            Log.Logger = new LoggerConfiguration()
                .MinimumLevel.Debug()
                .Enrich.FromLogContext()
                .WriteTo.Console(
                    restrictedToMinimumLevel: logLevel,
                    theme: ConsoleTheme.None,
                    outputTemplate: logTemplate
                )
                .CreateLogger();

            _logger = Log.ForContext<Program>();
        }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline
                .Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "StaticPatcher.esp")
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _settings
                )
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            ConfigureLogging();
            _logger.Information("Classifying placeable objects");
            ItemClassifier classifier = new(state.LinkCache);
            var placeable =
                state.LoadOrder.PriorityOrder.WinningOverrides<IPlaceableObjectGetter>();

            foreach (var baseObj in placeable)
            {
                if (
                    (baseObj is IItemGetter && baseObj is not ILightGetter)
                    || baseObj is IMoveableStaticGetter
                )
                {
                    var result = classifier.Classify(baseObj);
                }
            }
        }
    }
}
